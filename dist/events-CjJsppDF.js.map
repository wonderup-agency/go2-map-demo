{"version":3,"file":"events-CjJsppDF.js","sources":["../src/components/events.js"],"sourcesContent":["/**\n *\n * @param {HTMLElement} component\n */\nexport default async function (component) {\n  const events = component.querySelectorAll('[data-events=\"event-element\"]')\n\n  events.forEach((event, i) => {\n    const dayEl = event.querySelector('[data-events=\"DD\"]')\n    const monthYearEl = event.querySelector('[data-events=\"MMM-YYYY\"]')\n    const timeEl = event.querySelector('[data-custom=\"start-end-date\"]')\n\n    const startDateString = event.dataset.startDate\n    const endDateString = event.dataset.endDate\n    const timezoneString = event.dataset.timezone\n\n    if (startDateString == '' || endDateString == '') {\n      event.parentElement.remove()\n      return\n    }\n\n    const startDate = new Date(startDateString)\n    const endDate = new Date(endDateString)\n\n    // Check if endDate is one day older than the current date in UTC\n    const now = new Date() // Current date/time in UTC\n    const utcEndDate = new Date(endDate.toISOString())\n    const utcCurrentDate = new Date(now.toISOString())\n\n    // Truncate to day for comparison (ignoring time)\n    const endDateDay = new Date(\n      utcEndDate.getUTCFullYear(),\n      utcEndDate.getUTCMonth(),\n      utcEndDate.getUTCDate()\n    )\n    const currentDateDay = new Date(\n      utcCurrentDate.getUTCFullYear(),\n      utcCurrentDate.getUTCMonth(),\n      utcCurrentDate.getUTCDate()\n    )\n\n    // Check if endDate is exactly one day after current date\n    const oneDayInMs = 24 * 60 * 60 * 1000 // One day in milliseconds\n    if (endDateDay.getTime() + oneDayInMs <= currentDateDay.getTime()) {\n      event.parentElement.remove()\n      return\n    }\n\n    // Format day, month, year\n    const dateOptions = {\n      timeZone: timezoneString,\n      day: '2-digit',\n      month: 'short',\n      year: 'numeric',\n    }\n    const dateFormatter = new Intl.DateTimeFormat('en-US', dateOptions)\n    const startParts = dateFormatter.formatToParts(startDate)\n\n    const day = startParts.find((part) => part.type === 'day').value\n    const month = startParts.find((part) => part.type === 'month').value\n    const year = startParts.find((part) => part.type === 'year').value\n\n    dayEl.textContent = day\n    monthYearEl.textContent = `${month} ${year}`\n\n    // Format time (HH:MM AM/PM)\n    const timeOptions = {\n      timeZone: timezoneString,\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    }\n    const timeFormatter = new Intl.DateTimeFormat('en-US', timeOptions)\n\n    // Format start and end times\n    const startTimeParts = timeFormatter.formatToParts(startDate)\n    const endTimeParts = timeFormatter.formatToParts(endDate)\n\n    // Extract hour, minute, and period (AM/PM)\n    const startHour = startTimeParts.find((part) => part.type === 'hour').value\n    const startMinute = startTimeParts.find(\n      (part) => part.type === 'minute'\n    ).value\n    const startPeriod = startTimeParts.find(\n      (part) => part.type === 'dayPeriod'\n    ).value\n    const endHour = endTimeParts.find((part) => part.type === 'hour').value\n    const endMinute = endTimeParts.find((part) => part.type === 'minute').value\n    const endPeriod = endTimeParts.find(\n      (part) => part.type === 'dayPeriod'\n    ).value\n\n    // Combine into \"HH:MMAM - HH:MMPM\" format\n    const timeRange = `${startHour}:${startMinute}${startPeriod} - ${endHour}:${endMinute}${endPeriod}`\n    timeEl.textContent = timeRange\n  })\n}\n"],"names":["async","events","component","querySelectorAll","forEach","event","i","dayEl","querySelector","monthYearEl","timeEl","startDateString","dataset","startDate","endDateString","endDate","timezoneString","timezone","parentElement","remove","Date","now","utcEndDate","toISOString","utcCurrentDate","endDateDay","getUTCFullYear","getUTCMonth","getUTCDate","currentDateDay","getTime","dateOptions","timeZone","day","month","year","startParts","Intl","DateTimeFormat","formatToParts","find","part","type","value","textContent","timeOptions","hour","minute","hour12","timeFormatter","startTimeParts","endTimeParts","timeRange"],"mappings":"AAIeA,eAAAC,EAAgBC,GACdA,EAAUC,iBAAiB,iCAEnCC,QAAQ,CAACC,EAAOC,KACrB,MAAMC,EAAQF,EAAMG,cAAc,sBAC5BC,EAAcJ,EAAMG,cAAc,4BAClCE,EAASL,EAAMG,cAAc,kCAE7BG,EAAkBN,EAAMO,QAAQC,UAChCC,EAAgBT,EAAMO,QAAQG,QAC9BC,EAAiBX,EAAMO,QAAQK,SAErC,GAAuB,IAAnBN,GAA0C,IAAjBG,EAE3B,YADAT,EAAMa,cAAcC,SAItB,MAAMN,EAAY,IAAIO,KAAKT,GACrBI,EAAU,IAAIK,KAAKN,GAGnBO,EAAM,IAAID,KACVE,EAAa,IAAIF,KAAKL,EAAQQ,eAC9BC,EAAiB,IAAIJ,KAAKC,EAAIE,eAG9BE,EAAa,IAAIL,KACrBE,EAAWI,iBACXJ,EAAWK,cACXL,EAAWM,cAEPC,EAAiB,IAAIT,KACzBI,EAAeE,iBACfF,EAAeG,cACfH,EAAeI,cAKjB,GAAIH,EAAWK,UADI,OACsBD,EAAeC,UAEtD,YADAzB,EAAMa,cAAcC,SAKtB,MAAMY,EAAc,CAClBC,SAAUhB,EACViB,IAAK,UACLC,MAAO,QACPC,KAAM,WAGFC,EADgB,IAAIC,KAAKC,eAAe,QAASP,GACtBQ,cAAc1B,GAEzCoB,EAAMG,EAAWI,KAAMC,GAAuB,QAAdA,EAAKC,MAAgBC,MACrDT,EAAQE,EAAWI,KAAMC,GAAuB,UAAdA,EAAKC,MAAkBC,MACzDR,EAAOC,EAAWI,KAAMC,GAAuB,SAAdA,EAAKC,MAAiBC,MAE7DpC,EAAMqC,YAAcX,EACpBxB,EAAYmC,YAAc,GAAGV,KAASC,IAGtC,MAAMU,EAAc,CAClBb,SAAUhB,EACV8B,KAAM,UACNC,OAAQ,UACRC,QAAQ,GAEJC,EAAgB,IAAIZ,KAAKC,eAAe,QAASO,GAGjDK,EAAiBD,EAAcV,cAAc1B,GAC7CsC,EAAeF,EAAcV,cAAcxB,GAiB3CqC,EAAY,GAdAF,EAAeV,KAAMC,GAAuB,SAAdA,EAAKC,MAAiBC,SAClDO,EAAeV,KAChCC,GAAuB,WAAdA,EAAKC,MACfC,QACkBO,EAAeV,KAChCC,GAAuB,cAAdA,EAAKC,MACfC,WACcQ,EAAaX,KAAMC,GAAuB,SAAdA,EAAKC,MAAiBC,SAChDQ,EAAaX,KAAMC,GAAuB,WAAdA,EAAKC,MAAmBC,QACpDQ,EAAaX,KAC5BC,GAAuB,cAAdA,EAAKC,MACfC,QAIFjC,EAAOkC,YAAcQ,GAEzB"}